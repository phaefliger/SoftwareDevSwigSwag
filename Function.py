# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Function', [dirname(__file__)])
        except ImportError:
            import _Function
            return _Function
        if fp is not None:
            try:
                _mod = imp.load_module('_Function', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Function = swig_import_helper()
    del swig_import_helper
else:
    import _Function
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Function.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _Function.SwigPyIterator_value(self)
    def incr(self, n=1): return _Function.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _Function.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _Function.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _Function.SwigPyIterator_equal(self, *args)
    def copy(self): return _Function.SwigPyIterator_copy(self)
    def next(self): return _Function.SwigPyIterator_next(self)
    def __next__(self): return _Function.SwigPyIterator___next__(self)
    def previous(self): return _Function.SwigPyIterator_previous(self)
    def advance(self, *args): return _Function.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _Function.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _Function.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _Function.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _Function.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _Function.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _Function.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _Function.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Mesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def saveToHDF5(self, *args): return _Function.Mesh_saveToHDF5(self, *args)
    def cellPolyOrder(self, *args): return _Function.Mesh_cellPolyOrder(self, *args)
    def getActiveCellIDs(self): return _Function.Mesh_getActiveCellIDs(self)
    def hRefine(self, *args): return _Function.Mesh_hRefine(self, *args)
    def numActiveElements(self): return _Function.Mesh_numActiveElements(self)
    def numFluxDofs(self): return _Function.Mesh_numFluxDofs(self)
    def numFieldDofs(self): return _Function.Mesh_numFieldDofs(self)
    def numGlobalDofs(self): return _Function.Mesh_numGlobalDofs(self)
    def numElements(self): return _Function.Mesh_numElements(self)
    def pRefine(self, *args): return _Function.Mesh_pRefine(self, *args)
    def registerSolution(self, *args): return _Function.Mesh_registerSolution(self, *args)
    def vertexIndicesForCell(self, *args): return _Function.Mesh_vertexIndicesForCell(self, *args)
    def verticesForCell(self, *args): return _Function.Mesh_verticesForCell(self, *args)
    __swig_destroy__ = _Function.delete_Mesh
    __del__ = lambda self : None;
Mesh_swigregister = _Function.Mesh_swigregister
Mesh_swigregister(Mesh)

class MeshPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeshPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MeshPtr, name)
    __repr__ = _swig_repr
    def __deref__(self): return _Function.MeshPtr___deref__(self)
    def __init__(self): 
        this = _Function.new_MeshPtr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Function.delete_MeshPtr
    __del__ = lambda self : None;
    def saveToHDF5(self, *args): return _Function.MeshPtr_saveToHDF5(self, *args)
    def cellPolyOrder(self, *args): return _Function.MeshPtr_cellPolyOrder(self, *args)
    def getActiveCellIDs(self): return _Function.MeshPtr_getActiveCellIDs(self)
    def hRefine(self, *args): return _Function.MeshPtr_hRefine(self, *args)
    def numActiveElements(self): return _Function.MeshPtr_numActiveElements(self)
    def numFluxDofs(self): return _Function.MeshPtr_numFluxDofs(self)
    def numFieldDofs(self): return _Function.MeshPtr_numFieldDofs(self)
    def numGlobalDofs(self): return _Function.MeshPtr_numGlobalDofs(self)
    def numElements(self): return _Function.MeshPtr_numElements(self)
    def pRefine(self, *args): return _Function.MeshPtr_pRefine(self, *args)
    def registerSolution(self, *args): return _Function.MeshPtr_registerSolution(self, *args)
    def vertexIndicesForCell(self, *args): return _Function.MeshPtr_vertexIndicesForCell(self, *args)
    def verticesForCell(self, *args): return _Function.MeshPtr_verticesForCell(self, *args)
MeshPtr_swigregister = _Function.MeshPtr_swigregister
MeshPtr_swigregister(MeshPtr)

class Function(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Function, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Function, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def displayString(self): return _Function.Function_displayString(self)
    def x(self): return _Function.Function_x(self)
    def y(self): return _Function.Function_y(self)
    def div(self): return _Function.Function_div(self)
    def rank(self): return _Function.Function_rank(self)
    def l2norm(self, *args): return _Function.Function_l2norm(self, *args)
    def dx(self): return _Function.Function_dx(self)
    def dy(self): return _Function.Function_dy(self)
    def grad(self): return _Function.Function_grad(self)
    __swig_getmethods__["evaluate"] = lambda x: _Function.Function_evaluate
    if _newclass:evaluate = staticmethod(_Function.Function_evaluate)
    __swig_getmethods__["xn"] = lambda x: _Function.Function_xn
    if _newclass:xn = staticmethod(_Function.Function_xn)
    __swig_getmethods__["yn"] = lambda x: _Function.Function_yn
    if _newclass:yn = staticmethod(_Function.Function_yn)
    __swig_getmethods__["composedFunction"] = lambda x: _Function.Function_composedFunction
    if _newclass:composedFunction = staticmethod(_Function.Function_composedFunction)
    __swig_getmethods__["constant"] = lambda x: _Function.Function_constant
    if _newclass:constant = staticmethod(_Function.Function_constant)
    __swig_getmethods__["vectorize"] = lambda x: _Function.Function_vectorize
    if _newclass:vectorize = staticmethod(_Function.Function_vectorize)
    __swig_getmethods__["normal"] = lambda x: _Function.Function_normal
    if _newclass:normal = staticmethod(_Function.Function_normal)
    __swig_getmethods__["solution"] = lambda x: _Function.Function_solution
    if _newclass:solution = staticmethod(_Function.Function_solution)
    def __str__(self): return _Function.Function___str__(self)
    __swig_destroy__ = _Function.delete_Function
    __del__ = lambda self : None;
Function_swigregister = _Function.Function_swigregister
Function_swigregister(Function)

def Function_evaluate(*args):
  return _Function.Function_evaluate(*args)
Function_evaluate = _Function.Function_evaluate

def Function_xn(n=1):
  return _Function.Function_xn(n)
Function_xn = _Function.Function_xn

def Function_yn(n=1):
  return _Function.Function_yn(n)
Function_yn = _Function.Function_yn

def Function_composedFunction(*args):
  return _Function.Function_composedFunction(*args)
Function_composedFunction = _Function.Function_composedFunction

def Function_constant(*args):
  return _Function.Function_constant(*args)
Function_constant = _Function.Function_constant

def Function_vectorize(*args):
  return _Function.Function_vectorize(*args)
Function_vectorize = _Function.Function_vectorize

def Function_normal():
  return _Function.Function_normal()
Function_normal = _Function.Function_normal

def Function_solution(*args):
  return _Function.Function_solution(*args)
Function_solution = _Function.Function_solution

class FunctionPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FunctionPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FunctionPtr, name)
    __repr__ = _swig_repr
    def __deref__(self): return _Function.FunctionPtr___deref__(self)
    def __add__(self, *args): return _Function.FunctionPtr___add__(self, *args)
    def __radd__(self, *args): return _Function.FunctionPtr___radd__(self, *args)
    def __sub__(self, *args): return _Function.FunctionPtr___sub__(self, *args)
    def __rsub__(self, *args): return _Function.FunctionPtr___rsub__(self, *args)
    def __div__(self, *args): return _Function.FunctionPtr___div__(self, *args)
    def __rdiv__(self, *args): return _Function.FunctionPtr___rdiv__(self, *args)
    def __mul__(self, *args): return _Function.FunctionPtr___mul__(self, *args)
    def __rmul__(self, *args): return _Function.FunctionPtr___rmul__(self, *args)
    def __neg__(self): return _Function.FunctionPtr___neg__(self)
    def __init__(self): 
        this = _Function.new_FunctionPtr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Function.delete_FunctionPtr
    __del__ = lambda self : None;
    def displayString(self): return _Function.FunctionPtr_displayString(self)
    def evaluate(self, *args): return _Function.FunctionPtr_evaluate(self, *args)
    def x(self): return _Function.FunctionPtr_x(self)
    def y(self): return _Function.FunctionPtr_y(self)
    def div(self): return _Function.FunctionPtr_div(self)
    def rank(self): return _Function.FunctionPtr_rank(self)
    def l2norm(self, *args): return _Function.FunctionPtr_l2norm(self, *args)
    def dx(self): return _Function.FunctionPtr_dx(self)
    def dy(self): return _Function.FunctionPtr_dy(self)
    def grad(self): return _Function.FunctionPtr_grad(self)
    def xn(self, n=1): return _Function.FunctionPtr_xn(self, n)
    def yn(self, n=1): return _Function.FunctionPtr_yn(self, n)
    def composedFunction(self, *args): return _Function.FunctionPtr_composedFunction(self, *args)
    def constant(self, *args): return _Function.FunctionPtr_constant(self, *args)
    def vectorize(self, *args): return _Function.FunctionPtr_vectorize(self, *args)
    def normal(self): return _Function.FunctionPtr_normal(self)
    def solution(self, *args): return _Function.FunctionPtr_solution(self, *args)
    def __str__(self): return _Function.FunctionPtr___str__(self)
FunctionPtr_swigregister = _Function.FunctionPtr_swigregister
FunctionPtr_swigregister(FunctionPtr)

# This file is compatible with both classic and new-style classes.


