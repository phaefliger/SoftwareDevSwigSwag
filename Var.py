# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Var', [dirname(__file__)])
        except ImportError:
            import _Var
            return _Var
        if fp is not None:
            try:
                _mod = imp.load_module('_Var', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Var = swig_import_helper()
    del swig_import_helper
else:
    import _Var
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


HGRAD = _Var.HGRAD
HCURL = _Var.HCURL
HDIV = _Var.HDIV
HGRAD_DISC = _Var.HGRAD_DISC
HCURL_DISC = _Var.HCURL_DISC
HDIV_DISC = _Var.HDIV_DISC
HDIV_FREE = _Var.HDIV_FREE
L2 = _Var.L2
CONSTANT_SCALAR = _Var.CONSTANT_SCALAR
VECTOR_HGRAD = _Var.VECTOR_HGRAD
VECTOR_HGRAD_DISC = _Var.VECTOR_HGRAD_DISC
VECTOR_L2 = _Var.VECTOR_L2
UNKNOWN_FS = _Var.UNKNOWN_FS
OP_VALUE = _Var.OP_VALUE
OP_GRAD = _Var.OP_GRAD
OP_CURL = _Var.OP_CURL
OP_DIV = _Var.OP_DIV
OP_D1 = _Var.OP_D1
OP_D2 = _Var.OP_D2
OP_D3 = _Var.OP_D3
OP_D4 = _Var.OP_D4
OP_D5 = _Var.OP_D5
OP_D6 = _Var.OP_D6
OP_D7 = _Var.OP_D7
OP_D8 = _Var.OP_D8
OP_D9 = _Var.OP_D9
OP_D10 = _Var.OP_D10
OP_X = _Var.OP_X
OP_Y = _Var.OP_Y
OP_Z = _Var.OP_Z
OP_DX = _Var.OP_DX
OP_DY = _Var.OP_DY
OP_DZ = _Var.OP_DZ
OP_CROSS_NORMAL = _Var.OP_CROSS_NORMAL
OP_DOT_NORMAL = _Var.OP_DOT_NORMAL
OP_TIMES_NORMAL = _Var.OP_TIMES_NORMAL
OP_TIMES_NORMAL_X = _Var.OP_TIMES_NORMAL_X
OP_TIMES_NORMAL_Y = _Var.OP_TIMES_NORMAL_Y
OP_TIMES_NORMAL_Z = _Var.OP_TIMES_NORMAL_Z
OP_TIMES_NORMAL_T = _Var.OP_TIMES_NORMAL_T
OP_VECTORIZE_VALUE = _Var.OP_VECTORIZE_VALUE
TEST = _Var.TEST
FIELD = _Var.FIELD
TRACE = _Var.TRACE
FLUX = _Var.FLUX
UNKNOWN_TYPE = _Var.UNKNOWN_TYPE
MIXED_TYPE = _Var.MIXED_TYPE
class Var(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Var, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Var, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def ID(self): return _Var.Var_ID(self)
    def name(self): return _Var.Var_name(self)
    def displayString(self): return _Var.Var_displayString(self)
    def rank(self): return _Var.Var_rank(self)
    def space(self): return _Var.Var_space(self)
    def varType(self): return _Var.Var_varType(self)
    def op(self): return _Var.Var_op(self)
    def termTraced(self): return _Var.Var_termTraced(self)
    def grad(self): return _Var.Var_grad(self)
    def div(self): return _Var.Var_div(self)
    def curl(self, *args): return _Var.Var_curl(self, *args)
    def dx(self): return _Var.Var_dx(self)
    def dy(self): return _Var.Var_dy(self)
    def x(self): return _Var.Var_x(self)
    def y(self): return _Var.Var_y(self)
    __swig_destroy__ = _Var.delete_Var
    __del__ = lambda self : None;
Var_swigregister = _Var.Var_swigregister
Var_swigregister(Var)

class VarPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VarPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VarPtr, name)
    __repr__ = _swig_repr
    def __deref__(self): return _Var.VarPtr___deref__(self)
    def __mul__(self, *args): return _Var.VarPtr___mul__(self, *args)
    def __rmul__(self, *args): return _Var.VarPtr___rmul__(self, *args)
    def __add__(self, *args): return _Var.VarPtr___add__(self, *args)
    def __div__(self, *args): return _Var.VarPtr___div__(self, *args)
    def __sub__(self, *args): return _Var.VarPtr___sub__(self, *args)
    def __init__(self): 
        this = _Var.new_VarPtr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Var.delete_VarPtr
    __del__ = lambda self : None;
    def ID(self): return _Var.VarPtr_ID(self)
    def name(self): return _Var.VarPtr_name(self)
    def displayString(self): return _Var.VarPtr_displayString(self)
    def rank(self): return _Var.VarPtr_rank(self)
    def space(self): return _Var.VarPtr_space(self)
    def varType(self): return _Var.VarPtr_varType(self)
    def op(self): return _Var.VarPtr_op(self)
    def termTraced(self): return _Var.VarPtr_termTraced(self)
    def grad(self): return _Var.VarPtr_grad(self)
    def div(self): return _Var.VarPtr_div(self)
    def curl(self, *args): return _Var.VarPtr_curl(self, *args)
    def dx(self): return _Var.VarPtr_dx(self)
    def dy(self): return _Var.VarPtr_dy(self)
    def x(self): return _Var.VarPtr_x(self)
    def y(self): return _Var.VarPtr_y(self)
VarPtr_swigregister = _Var.VarPtr_swigregister
VarPtr_swigregister(VarPtr)

# This file is compatible with both classic and new-style classes.


